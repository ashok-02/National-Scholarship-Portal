// <auto-generated />
using System;
using Backend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Migrations
{
    [DbContext(typeof(ScholarshipDbContext))]
    partial class ScholarshipDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Backend.Models.Institute", b =>
                {
                    b.Property<int>("InstituteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressPincode")
                        .HasColumnType("int");

                    b.Property<string>("AddressState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AffliatedUniversityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AffliatedUniversityState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ApprovedByMinistry")
                        .HasColumnType("bit");

                    b.Property<bool>("ApprovedByOfficer")
                        .HasColumnType("bit");

                    b.Property<string>("DiseCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstituteCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstituteCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InstituteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstituteType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PrincipalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniversityAffliationCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YearOfAddmission")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstituteId");

                    b.HasIndex("DiseCode", "InstituteCode")
                        .IsUnique()
                        .HasFilter("[DiseCode] IS NOT NULL AND [InstituteCode] IS NOT NULL");

                    b.ToTable("Institutes");
                });

            modelBuilder.Entity("Backend.Models.Ministry", b =>
                {
                    b.Property<int>("MinistryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MinistryEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("MinistryId");

                    b.ToTable("Ministries");

                    b.HasData(
                        new
                        {
                            MinistryId = 1,
                            MinistryEmail = "ministry@nsp.com",
                            Name = "Ministry",
                            PasswordHash = new byte[] { 81, 210, 13, 101, 7, 116, 28, 182, 60, 38, 25, 239, 239, 98, 66, 72, 212, 124, 84, 238, 178, 153, 147, 112, 5, 205, 175, 219, 231, 25, 106, 128, 46, 196, 32, 63, 23, 15, 101, 219, 21, 132, 218, 52, 78, 23, 157, 170, 217, 241, 178, 214, 104, 57, 110, 54, 240, 154, 102, 129, 136, 99, 174, 254 },
                            PasswordSalt = new byte[] { 247, 156, 160, 226, 28, 144, 29, 143, 91, 236, 198, 101, 212, 188, 213, 168, 103, 94, 22, 150, 70, 131, 164, 64, 54, 118, 133, 96, 70, 29, 149, 21, 182, 96, 39, 240, 160, 102, 60, 148, 200, 107, 125, 82, 62, 220, 153, 123, 124, 71, 92, 177, 58, 84, 40, 203, 240, 46, 188, 128, 32, 136, 122, 107, 4, 226, 83, 66, 7, 195, 234, 164, 135, 242, 206, 0, 176, 31, 135, 204, 154, 27, 130, 35, 61, 242, 190, 121, 12, 237, 170, 227, 104, 211, 86, 180, 153, 139, 163, 58, 141, 225, 116, 171, 14, 50, 182, 51, 210, 27, 217, 237, 231, 145, 109, 129, 118, 15, 59, 200, 24, 139, 193, 86, 23, 106, 45, 139 }
                        });
                });

            modelBuilder.Entity("Backend.Models.NodalOfficer", b =>
                {
                    b.Property<int>("OfficerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OfficerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("OfficerId");

                    b.ToTable("NodalOfficers");

                    b.HasData(
                        new
                        {
                            OfficerId = 1,
                            OfficerEmail = "officer@nsp.com",
                            OfficerName = "Officer",
                            PasswordHash = new byte[] { 4, 68, 108, 223, 154, 109, 251, 213, 94, 123, 178, 74, 44, 19, 133, 87, 222, 177, 75, 89, 151, 99, 158, 0, 227, 208, 215, 112, 173, 152, 128, 102, 208, 45, 118, 184, 249, 139, 227, 71, 120, 231, 50, 168, 50, 185, 198, 195, 107, 86, 19, 197, 205, 240, 50, 228, 183, 91, 200, 63, 123, 234, 1, 97 },
                            PasswordSalt = new byte[] { 53, 150, 76, 167, 152, 244, 97, 17, 45, 122, 155, 95, 85, 213, 63, 229, 241, 203, 51, 124, 50, 68, 135, 47, 198, 246, 227, 218, 36, 6, 190, 137, 35, 251, 60, 100, 11, 86, 248, 190, 54, 51, 154, 215, 10, 196, 160, 86, 207, 79, 109, 165, 199, 231, 80, 172, 15, 144, 150, 134, 235, 161, 30, 79, 224, 67, 26, 7, 68, 1, 33, 84, 54, 197, 217, 233, 227, 236, 78, 227, 159, 129, 208, 127, 71, 164, 124, 96, 105, 179, 86, 224, 127, 161, 52, 8, 191, 198, 139, 119, 148, 71, 29, 63, 53, 37, 254, 124, 162, 210, 28, 216, 73, 241, 167, 109, 55, 138, 125, 0, 254, 96, 42, 154, 253, 2, 143, 97 }
                        });
                });

            modelBuilder.Entity("Backend.Models.ScholarshipApplication", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AadharCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AadharNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddmissionFee")
                        .HasColumnType("int");

                    b.Property<int>("AnnualIncome")
                        .HasColumnType("int");

                    b.Property<bool>("ApprovedByInstitute")
                        .HasColumnType("bit");

                    b.Property<bool>("ApprovedByMinistry")
                        .HasColumnType("bit");

                    b.Property<bool>("ApprovedByOfficer")
                        .HasColumnType("bit");

                    b.Property<string>("BankPassBook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Block")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoardName10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoardName12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CasteOrIncomeCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassStartDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Community")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DomicileCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeeReceiptOfCurrentYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstituteCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstituteIdCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstituteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsDisabled")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<string>("MarkSheet10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarkSheet12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MartialStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModeOfStudy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OtherFee")
                        .HasColumnType("int");

                    b.Property<string>("ParentProfession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PassingYear10")
                        .HasColumnType("int");

                    b.Property<int>("PassingYear12")
                        .HasColumnType("int");

                    b.Property<int>("Percentage10")
                        .HasColumnType("int");

                    b.Property<int>("Percentage12")
                        .HasColumnType("int");

                    b.Property<int>("PercentageDisability")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pincode")
                        .HasColumnType("int");

                    b.Property<string>("PresentCourse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PresentCourseYear")
                        .HasColumnType("int");

                    b.Property<int>("PreviousClassPercentage")
                        .HasColumnType("int");

                    b.Property<string>("PreviousCourse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PreviousPassingYear")
                        .HasColumnType("int");

                    b.Property<string>("PreviousYearMarksheet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Religion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RollNo10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RollNo12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchemeId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TutionFee")
                        .HasColumnType("int");

                    b.Property<string>("TypeOfDisability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniversityBoardName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationId");

                    b.HasIndex("SchemeId");

                    b.HasIndex("StudentId");

                    b.ToTable("ScholarshipApplications");
                });

            modelBuilder.Entity("Backend.Models.ScholarshipScheme", b =>
                {
                    b.Property<int>("SchemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchemeId");

                    b.ToTable("ScholarshipSchemes");
                });

            modelBuilder.Entity("Backend.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AadharNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankIfscCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstituteCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstituteId")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StateOfDomicile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.HasIndex("InstituteId");

                    b.HasIndex("AadharNumber", "PhoneNo", "BankAccountNumber")
                        .IsUnique()
                        .HasFilter("[AadharNumber] IS NOT NULL AND [PhoneNo] IS NOT NULL AND [BankAccountNumber] IS NOT NULL");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Backend.Models.ScholarshipApplication", b =>
                {
                    b.HasOne("Backend.Models.ScholarshipScheme", "ScholarshipScheme")
                        .WithMany("ScholarshipApplication")
                        .HasForeignKey("SchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Student", "Student")
                        .WithMany("ScholarshipApplication")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScholarshipScheme");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Backend.Models.Student", b =>
                {
                    b.HasOne("Backend.Models.Institute", "Institute")
                        .WithMany("Student")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institute");
                });

            modelBuilder.Entity("Backend.Models.Institute", b =>
                {
                    b.Navigation("Student");
                });

            modelBuilder.Entity("Backend.Models.ScholarshipScheme", b =>
                {
                    b.Navigation("ScholarshipApplication");
                });

            modelBuilder.Entity("Backend.Models.Student", b =>
                {
                    b.Navigation("ScholarshipApplication");
                });
#pragma warning restore 612, 618
        }
    }
}
